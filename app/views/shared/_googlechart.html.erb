<div id="chart_div" style="width: 100%; height: 500px;"></div>
<script type="text/javascript">
  google.load('visualization', '1', {packages: ['corechart']});
</script>
<script type="text/javascript">


function aggregateByWeek() {
  
  var weeklyAggregate = new google.visualization.DataTable();  

  weeklyAggregate.addColumn('string', 'Date'); 
  weeklyAggregate.addColumn('number', 'Min Qty');
  weeklyAggregate.addColumn('number', 'On Hand');
  weeklyAggregate.addColumn('number', 'Available');
  weeklyAggregate.addColumn('number', 'On Order');
  weeklyAggregate.addColumn('number', 'In Transit');
  weeklyAggregate.addColumn('number', 'Allocated');
  weeklyAggregate.addColumn('number', 'Forecasted');
  weeklyAggregate.addColumn('number', 'Max Qty');

  var minWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 1, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);
  var onOrderWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 4, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);
  var inTransitWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 5, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);
  var allocatedWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 6, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);
  var forecastWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 7, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);
  var maxWeeklyTotal = google.visualization.data.group(data_array, [10], [{'column': 8, 'aggregation': google.visualization.data.sum, 'type': 'number'}]);

  for (var weekRowNumber = 0, maxrows = minWeeklyTotal.getNumberOfRows(); weekRowNumber < maxrows; weekRowNumber++) {

    var weekNumber = minWeeklyTotal.getValue(weekRowNumber, 0);
    var weeklySubset = data_array.getFilteredRows([{column: 10, value: weekNumber}]);
    var firstIndexOfWeek = Math.min.apply(Math, weeklySubset);
    var lastIndexOfWeek = Math.max.apply(Math, weeklySubset);	
    var onHandQuantity = data_array.getValue(firstIndexOfWeek, 2);
    var availableQuantity = data_array.getValue(lastIndexOfWeek, 3);

    var minQty = minWeeklyTotal.getValue(weekRowNumber,1);
    var onOrder = onOrderWeeklyTotal.getValue(weekRowNumber,1);
    var inTransit = inTransitWeeklyTotal.getValue(weekRowNumber,1);
    var allocated = allocatedWeeklyTotal.getValue(weekRowNumber,1);
    var forecasted = forecastWeeklyTotal.getValue(weekRowNumber,1);
    var maxQty = maxWeeklyTotal.getValue(weekRowNumber, 1);

    weeklyAggregate.addRow([weekNumber, minQty, onHandQuantity,availableQuantity, onOrder, inTransit, allocated, forecasted, maxQty]);

  }
  return weeklyAggregate;
}


Date.prototype.getWeek = function () {  
    // Create a copy of this date object  
    var target  = new Date(this.valueOf());  
  
    // ISO week date weeks start on monday  
    // so correct the day number  
    var dayNr   = (this.getDay() + 6) % 7;  
  
    // ISO 8601 states that week 1 is the week  
    // with the first thursday of that year.  
    // Set the target date to the thursday in the target week  
    target.setDate(target.getDate() - dayNr + 3);  
  
    // Store the millisecond value of the target date  
    var firstThursday = target.valueOf();  
  
    // Set the target to the first thursday of the year  
    // First set the target to january first  
    target.setMonth(0, 1);  
    // Not a thursday? Correct the date to the next thursday  
    if (target.getDay() != 4) {  
        target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);  
    }  
  
    // The weeknumber is the number of weeks between the   
    // first thursday of the year and the thursday in the target week  
    return 1 + Math.ceil((firstThursday - target) / 604800000); // 604800000 = 7 * 24 * 3600 * 1000  
}

function drawChart() {

  var data_array = new google.visualization.DataTable();  

  data_array.addColumn('string', 'Date');
  data_array.addColumn('number', 'Min Qty');
  data_array.addColumn('number', 'On Hand');
  data_array.addColumn('number', 'Available');
  data_array.addColumn('number', 'On Order');
  data_array.addColumn('number', 'In Transit');
  data_array.addColumn('number', 'Allocated');
  data_array.addColumn('number', 'Forecasted');
  data_array.addColumn('number', 'Max Qty');
  data_array.addColumn('date', 'Date Obj');
  data_array.addColumn('string', 'Week Number');

  <% @data.each do |daily| %>
    var projectionDate = new Date('<%= daily[0].to_s %> 12:00');
    data_array.addRow(['<%= daily[0].to_formatted_s(:short)%>', <%= daily[1]%>, <%= daily[2]%>, <%= daily[3]%>, <%= daily[4]%>, <%= daily[5]%>, <%= daily[6]%>, <%= daily[7]%>, <%= daily[8]%>, projectionDate, projectionDate.getWeek().toString() + "-" + projectionDate.getFullYear().toString()]); 
  <% end %>
   
  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));

  // create columns array
  var columns = [0];
  /* the series map is an array of data series
  * "column" is the index of the data column to use for the series
  * "display" is a boolean, set to true to make the series visible on the initial draw
  */
  var seriesMap = [{
    column: 1,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "red"} 
  }, {
    column: 2,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "#336699", curveType: 'function'} 
  },{
    column: 3,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "#E96D63", curveType: 'function' }
  }, {
    column: 4,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#666633" }
  }, {
    column: 5,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#FFCC00" }
  },{
    column: 6,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#26ba26" }
  }, {
    column: 7,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#FF6600" }
  }, {
    column: 8,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "red"}
  }];

  var columnsMap = {};

  var series = [];
  
  for (var i = 0; i < seriesMap.length; i++) {
    var col = seriesMap[i].column;
    columnsMap[col] = i;
    // set the default series option   
    series[i] = seriesMap[i]["formatSettings"];
    if (seriesMap[i].display) {
      // if the column is the domain column or in the default list, display the series
      columns.push(col);
    }
    else {
      // otherwise, hide it
      columns.push({
        label: data_array.getColumnLabel(col),
        type: data_array.getColumnType(col),
        sourceColumn: col,
        calc: function () {
          return null;
        }
      });
      // backup the default color (if set)
      if (typeof(series[i].color) !== 'undefined') {
        series[i].backupColor = series[i].color;
      }
      series[i].color = '#CCCCCC';
    } 
  }

  var options = {
    fontName: 'verdana',
    fontSize: 12,
    seriesType: "bars",
    legend: {position: "bottom"},
    title : 'Inventory Projections',
    vAxes: [{0: {textStyle:{color: 'red'}}},{1: {textStyle:{color: 'blue'}}}],
    series: series
  }

  function showHideSeries () {
    var sel = chart.getSelection();
    // if selection length is 0, we deselected an element
    if (sel.length > 0) {
      // if row is undefined, we clicked on the legend
      if (sel[0].row == null) {
        var col = sel[0].column;
        if (typeof(columns[col]) == 'number') {
          var src = columns[col];
          // hide the data series
          columns[col] = {
            label: data_array.getColumnLabel(src),
            type: data_array.getColumnType(src),
            sourceColumn: src,
            calc: function () {
	          return null;
            }
          };
          series[columnsMap[src]].backupColor = series[columnsMap[src]].color;
          // grey out the legend entry
          series[columnsMap[src]].color = '#CCCCCC';
        }
        else {
          var src = columns[col].sourceColumn;
          // show the data series
          columns[col] = src;
          series[columnsMap[src]].color = series[columnsMap[src]].backupColor;
          //series[columnsMap[src]].color = null;
        }
        var view = new google.visualization.DataView(data_array);
        view.setColumns(columns);
        chart.draw(view, options);
      }  
    }
  }

  google.visualization.events.addListener(chart, 'select', showHideSeries);

  // create a view with the default columns
  var view = new google.visualization.DataView(data_array);
  view.setColumns(columns);
  chart.draw(view, options);
}

 google.setOnLoadCallback(drawChart);
</script>
