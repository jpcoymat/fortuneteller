<div id="chart_div" style="width: 100%; height: 400px;"></div>
<script type='text/javascript' src='https://www.google.com/jsapi'></script>
<script type='text/javascript'>
google.load('visualization', '1', {'packages': ['corechart']});

function drawChart() {
    var data_array = new google.visualization.DataTable();
    data_array.addColumn('string', 'Proj. Date');
    data_array.addColumn('number', 'Min');
    data_array.addColumn('number', 'On Hand');
    data_array.addColumn('number', 'In Transit');
    data_array.addColumn('number', 'On Order');
    data_array.addColumn('number', 'Allocated');
    data_array.addColumn('number', 'Planned Consumption');
    data_array.addColumn('number', 'Available');
    data_array.addColumn('number', 'Max');
    <% @projections.each do |ip| %>
      data_array.addRow(['<%= ip.projected_for.to_formatted_s(:short) %>', <%= @product_location_assignment.minimum_quantity %> , <%= ip.on_hand_quantity %>,<%= ip.in_transit_quantity %>, <%= ip.on_order_quantity %>,null,null,<%= ip.available_quantity %>, <%= @product_location_assignment.maximum_quantity %>]);
     data_array.addRow(['<%= ip.projected_for.to_formatted_s(:short) %>', <%= @product_location_assignment.minimum_quantity %> , <%= ip.on_hand_quantity %>,null, null,<%= ip.allocated_quantity %>, <%= ip.forecasted_quantity %>, <%= ip.available_quantity %>, <%= @product_location_assignment.maximum_quantity %>]);
    <% end %>

  // Instantiate and draw our chart, passing in some options.
  var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));

  // create columns array
  var columns = [0];
  /* the series map is an array of data series
  * "column" is the index of the data column to use for the series
  * "display" is a boolean, set to true to make the series visible on the initial draw
  */
  var seriesMap = [{
    column: 1,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "red"}
  }, {
    column: 2,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "#336699", curveType: 'function'}
  },{
    column: 3,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#FF6600" }
  }, {
    column: 4,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#666633" }
  }, {
    column: 5,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#FFCC00" }
  },{
    column: 6,
    display: true,
    formatSettings: {targetAxisIndex: 1, color: "#26ba26" }
  }, {
    column: 7,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "#E96D63", curveType: 'function' }
  }, {
    column: 8,
    display: true,
    formatSettings: {type: "line", pointSize: 0, color: "red"}
  }];

  var columnsMap = {};

  var series = [];

  for (var i = 0; i < seriesMap.length; i++) {
    var col = seriesMap[i].column;
    columnsMap[col] = i;
    // set the default series option
    series[i] = seriesMap[i]["formatSettings"];
    if (seriesMap[i].display) {
      // if the column is the domain column or in the default list, display the series
      columns.push(col);
    }
    else {
      // otherwise, hide it
      columns.push({
        label: data_array.getColumnLabel(col),
        type: data_array.getColumnType(col),
        sourceColumn: col,
        calc: function () {
          return null;
        }
      });
      // backup the default color (if set)
      if (typeof(series[i].color) !== 'undefined') {
        series[i].backupColor = series[i].color;
      }
      series[i].color = '#CCCCCC';
    }
  }

  var options = {
    fontName: 'verdana',
    fontSize: 12,
    seriesType: "bars",
    legend: {position: "bottom"},
    title : 'Inventory Projections',
    vAxes: [{0: {textStyle:{color: 'red'}}},{1: {textStyle:{color: 'blue'}}}],
    series: series
  }
  
  function showHideSeries () {
    var sel = chart.getSelection();
    // if selection length is 0, we deselected an element
    if (sel.length > 0) {
      // if row is undefined, we clicked on the legend
      if (sel[0].row == null) {
        var col = sel[0].column;
        if (typeof(columns[col]) == 'number') {
          var src = columns[col];
          // hide the data series
          columns[col] = {
            label: data_array.getColumnLabel(src),
            type: data_array.getColumnType(src),
            sourceColumn: src,
            calc: function () {
                  return null;
            }
          };
          series[columnsMap[src]].backupColor = series[columnsMap[src]].color;
          // grey out the legend entry
          series[columnsMap[src]].color = '#CCCCCC';
        }
        else {
          var src = columns[col].sourceColumn;
          // show the data series
          columns[col] = src;
          series[columnsMap[src]].color = series[columnsMap[src]].backupColor;
          //series[columnsMap[src]].color = null;
        }
        var view = new google.visualization.DataView(data_array);
        view.setColumns(columns);
        chart.draw(view, options);
      }
    }
  }

  google.visualization.events.addListener(chart, 'select', showHideSeries);

  // create a view with the default columns
  var view = new google.visualization.DataView(data_array);
  view.setColumns(columns);
  chart.draw(view, options);
}

 google.setOnLoadCallback(drawChart);
  
  
</script>

